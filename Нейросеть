import torch 
import matplotlib.pyplot as plt

import matplotlib
matplotlib.rcParams['figure.figsize'] = (13.0, 5.0)

def  target_function(x):
       return 2**x * torch.sin(2**-x)

x_train =  torch.linspace(-10, 5, 100)
y_train = target_function(x_train) 

plt.plot(x_train.numpy(), y_train.numpy(), 'o')
plt.title('$2**x  *  sin(2**−x)$');

noise = torch.randn(y_train.shape) / 20.
plt.plot(x_train.numpy(), noise.numpy(), 'o')
plt.axis([-10, 10, -1, 1])
plt.title('Gaussian noise');
y_train = y_train + noise
plt.plot(x_train.numpy(), y_train.numpy(), 'o')
plt.title('noisy 2**x  *  sin(2**−x)')
plt.xlabel('x_train')
plt.ylabel('y_train');

x_train.unsqueeze_(1)
y_train.unsqueeze_(1)


x_validation = torch.linspace(-10, 5, 100)
y_validation = target_function(x_validation)

plt.plot(x_validation.numpy(), y_validation.numpy(), 'o')
plt.title('2**x  *  sin(2**−x)')
plt.xlabel('x_validation')
plt.ylabel('y_validation');

x_validation.unsqueeze_(1)
y_validation.unsqueeze_(1);

class SineNet(torch.nn.Module):
    def __init__(self, n_hidden_neurons):
        super(SineNet, self).__init__()
        self.fc1 = torch.nn.Linear(1, n_hidden_neurons)
        self.act1 = torch.nn.Sigmoid()
        self.fc2 = torch.nn.Linear(n_hidden_neurons, 1)

    def forward(self, x):
        x = self.fc1(x)
        x = self.act1(x)
        x = self.fc2(x)
        return x

sine_net = SineNet(20)

def predict(net, x, y):
    y_pred = net.forward(x)

    plt.plot(x.numpy(), y.numpy(), 'o', label='Groud truth')
    plt.plot(x.numpy(), y_pred.data.numpy(), 'o', c='r', label='Prediction');
    plt.legend(loc='upper left')
    plt.xlabel('$x$')
    plt.ylabel('$y$')

predict(sine_net, x_validation, y_validation)

optimizer = torch.optim.Adam(sine_net.parameters(), lr=0.01)

def loss(pred, target):
    squares = (pred - target) ** 2
    return squares.mean()




for epoch_index in range(2000):
    optimizer.zero_grad()

    y_pred = sine_net.forward(x_train)
    loss_val = loss(y_pred, y_train)

    loss_val.backward()

    optimizer.step()

predict(sine_net, x_validation, y_validation)

def metric(pred, target):
        return (pred - target).abs().mean()

print(metric(sine_net.forward(x_validation), y_validation).item())

